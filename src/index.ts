import 'dotenv/config';
import { app, BrowserWindow, ipcMain, screen } from 'electron';
import notion, { NotionPropertyError, type NotionConfig } from '@/modules/notion';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const displayWidth = screen.getPrimaryDisplay().bounds.width;

  const windowWidth = 1200;
  const windowHeight = 800;

  const mainWindow = new BrowserWindow({
    height: windowHeight,
    width: windowWidth,
    x: displayWidth - windowWidth,
    y: 0,
    frame: false,
    transparent: true,
    backgroundColor: '#993b82f6',
    resizable: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.handle('getCalender', async () => {
    try {
      return await notion.fetch();
    } catch (e) {
      console.log('Notion 일정 데이터를 가져오는 데 실패했습니다.');
      if (e instanceof NotionPropertyError) {
        console.error(e.message);
      } else {
        console.error(e);
      }

      app.quit();
    }
  });

  ipcMain.handle('loadNotionInfo', async () => {
    try {
      await notion.load();

      return true;
    } catch (e) {
      console.log('Notion Config를 불러오는 데 실패했습니다.');

      return false;
    }
  });

  ipcMain.handle('submitNotionInfo', async (_, { key, databaseId }: NotionConfig) => {
    notion.init({ key: key, databaseId: databaseId });
  });

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

if (app.isPackaged) {
  app.setLoginItemSettings({
    openAtLogin: true,
  });
}
